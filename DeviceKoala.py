#setupimport randomimport numpy as npimport timeimport itertoolsfrom SimulationManager import SimulationManager, SimulationGroupif __name__ == "__main__":    starttime = time.perf_counter()    simulationDir = '/local/kzisiadis/vicsek-simulation_sameRho_phaseShift'    # simulationDir = 'D:/simulationdata'    simulationManager = SimulationManager(simulationDir)    simulationConfigs = [        {'numSwimmers': [400, 1000], 'rhos': [4], 'etas': [2], 'amplitudes': [np.pi / 32], 'periods': [40, 50, 60, 70],         'phaseShifts': [[0, np.pi / 2], [0, np.pi]]},    ]    for configEntry in simulationConfigs:        for config in itertools.product(configEntry['numSwimmers'], configEntry['rhos'], configEntry['etas'],                                        configEntry['amplitudes'], configEntry['periods'], configEntry['phaseShifts']):            numSwimmer = config[0]            rho = config[1]            eta = config[2]            amplitude = config[3]            period = config[4]            phaseShifts = config[5]            environmentSideLength = np.sqrt(numSwimmer/rho)            def initialSwimmerParameterFunc(simulationIndex, totalNumberOfSimulations, swimmerIndex, a=amplitude, p=period):                return {                    "oscillationAmplitude": a,                    "oscillationPeriod": p,  # how many timesteps for one full oscillation                    "oscillationPhaseshift": random.choice(phaseShifts)                }            def constantFunc(simulationIndex, numSimulation, n=numSwimmer, envL=environmentSideLength, e=eta):                return {                    "timeSteps": 7200,                    "environmentSideLength": envL,                    "numSwimmers": n,                    "interactionRadius": 1,                    "randomAngleAmplitude": 15 * (simulationIndex / numSimulation),                    "initialVelocity": 0.0025,                    "swimmerSize": 0.04,                    "saveVideo": False,                }            phaseShiftString = ''.join(f'{str(np.round(x/np.pi, 2))}pi' for x in phaseShifts)            simulationDataDir = simulationDir + f'/sameRhoGroup_phaseShift_maxNumSwimmers={numSwimmer}_eta={eta}_amplitude={np.round(amplitude/np.pi, 2)}pi_period={period}_phaseShift=[{phaseShiftString}]'            sameRhoSimulationGroup = SimulationGroup(simulationDataDir=simulationDataDir,                                                     constantsFunc=constantFunc,                                                     initialParameterFunc=initialSwimmerParameterFunc,                                                     numSimulation=30, repeatNum=25,                                                     timePercentageUsedForMean=25,                                                     saveTrajectoryData=False)            simulationManager.appendGroup(sameRhoSimulationGroup)    simulationManager.simulate()    print('That took {} seconds'.format(time.perf_counter() - starttime))