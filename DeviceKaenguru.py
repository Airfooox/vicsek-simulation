#setupimport randomimport numpy as npimport timeimport itertoolsfrom SimulationManager import SimulationManager, SimulationGroupif __name__ == "__main__":    starttime = time.perf_counter()    # simulationDir = '/local/kzisiadis/vicsek-simulation_sameRho_phaseShift'    simulationDir = r'E:\simulationdata\variing_interaction_strength_with_oscillation'    simulationManager = SimulationManager(simulationDir)    simulationConfigs = [        {'numSwimmer': [1000], 'rho': [4], 'eta': [6], 'amplitude': [np.pi / 16], 'period': [30],         'phaseShifts': [[0]], 'interactionStrengthFactor': [0.1, 0.5, 1]},    ]    for configEntry in simulationConfigs:        for config in itertools.product(configEntry['numSwimmer'], configEntry['rho'], configEntry['eta'],                                        configEntry['amplitude'], configEntry['period'], configEntry['phaseShifts'],                                        configEntry['interactionStrengthFactor']):            numSwimmer = config[0]            rho = config[1]            eta = config[2]            amplitude = config[3]            period = config[4]            phaseShifts = config[5]            interactionStrengthFactor = config[6]            environmentSideLength = np.sqrt(numSwimmer/rho)            def configFunction(simulationIndex, numSimulation, n=numSwimmer, envL=environmentSideLength, e=eta, a=amplitude, per=period, pha=phaseShifts):                constants = {                    "timeSteps": 5500,                    "environmentSideLength": envL,                    "interactionRadius": 1,                    "randomAngleAmplitude": eta * (simulationIndex / numSimulation),                    "interactionStrengthFactor": interactionStrengthFactor,                    "groups": {},                    "velocity": 0.0025,                    "swimmerSize": 0.04,                    "saveVideo": False,                }                numGroups = len(phaseShifts)                for index, phaseShift in enumerate(phaseShifts):                    constants['groups'][f'{index}'] = {                        "numSwimmers": int(n // numGroups),                        "oscillationAmplitude": a,                        "oscillationPeriod": per,  # how many timesteps for one full oscillation                        "oscillationPhaseShift": phaseShift                    }                return constants            phaseShiftString = ','.join(f'{str(np.round(x/np.pi, 2))}pi' for x in phaseShifts)            simulationDataDir = simulationDir + f'/sameRhoGroup_phaseShift_N={numSwimmer}_rho={rho}_A={np.round(amplitude/np.pi, 2)}pi_T={period}_phi=[{phaseShiftString}]_g={interactionStrengthFactor}'            sameRhoSimulationGroup = SimulationGroup(simulationDataDir=simulationDataDir,                                                     configFunction=configFunction,                                                     numSimulation=20, repeatNum=50,                                                     timePercentageUsedForMean=25,                                                     saveTrajectoryData=False)            simulationManager.appendGroup(sameRhoSimulationGroup)    simulationManager.simulate()    print('That took {} seconds'.format(time.perf_counter() - starttime))